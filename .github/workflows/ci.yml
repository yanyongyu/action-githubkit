name: Docker Image CI

on:
  push:
    branches:
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - master

jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get Version
        id: version
        run: |
          echo "VERSION=$(uv version --short)" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check Version
        if: ${{ steps.version.outputs.VERSION != steps.version.outputs.TAG }}
        run: exit 1

  build:
    name: Image Build and Push
    runs-on: ubuntu-latest
    needs: check-version
    permissions:
      contents: read
      packages: write
    if: |-
      ${{
        always() &&
        (needs.check-version.result == 'success' || needs.check-version.result == 'skipped')
      }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Image Name and Scope
        id: image
        run: |
          echo "IMAGE=ghcr.io/${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
          echo "SCOPE=${{ hashFiles('**/Dockerfile') }}-${{ hashFiles('**/uv.lock') }}" >> $GITHUB_OUTPUT
          echo "ARTIFACT=docker-digests" >> $GITHUB_OUTPUT

      - name: Generate Labels
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ${{ steps.image.outputs.IMAGE }}

      - name: Cache buildkit
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            var-cache-apt
            var-lib-apt
            root-cache-uv
          key: buildkit-custom-cache-${{ hashFiles('**/Dockerfile') }}

      - name: Inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.3.0
        with:
          cache-map: |
            {
              "var-cache-apt": "/var/cache/apt",
              "var-lib-apt": "/var/lib/apt",
              "root-cache-uv": "/root/.cache/uv"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and Publish
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./docker/Dockerfile
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=${{ steps.image.outputs.SCOPE }}
          cache-to: type=gha,scope=${{ steps.image.outputs.SCOPE }},mode=max
          outputs: type=image,name=${{ steps.image.outputs.IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.image.outputs.ARTIFACT }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    name: Image Tag Push
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: |-
      ${{
        always() &&
        github.event_name != 'pull_request' &&
        needs.build.result == 'success'
      }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: "*-digests"
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Image Name
        id: image
        run: |
          echo "IMAGE=ghcr.io/${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT

      - name: Generate Tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ${{ steps.image.outputs.IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --dry-run $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image.outputs.IMAGE }}@sha256:%s ' *)
